<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RbOpenGlRendering</name>
    </assembly>
    <members>
        <member name="T:RbOpenGlRendering.RbCg.CgRenderEffect">
            <summary>
            Summary description for CgRenderEffect.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.#ctor(System.IntPtr)">
            <summary>
            Creates the effect
            </summary>
            <param name="context"> Handle to the CG context that created this effect </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the effect, loading it from a .cgfx file
            </summary>
            <param name="context"> Handle to the CG context that created this effect </param>
            <param name="path"> Path to the effect file </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.#ctor(System.IntPtr,System.IO.Stream,System.String)">
            <summary>
            Creates the effect, loading it from a .cgfx stream
            </summary>
            <param name="context"> Handle to the CG context that created this effect </param>
            <param name="path"> Path to the effect file </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.Load(System.String)">
            <summary>
            Loads this effect from a .cgfx file
            </summary>
            <param name="path"> Path to the effect file </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.Load(System.IO.Stream,System.String)">
            <summary>
            Loads this effect from a .cgfx stream
            </summary>
            <param name="path"> Stream containing the .cgfx file </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.CreateFromHandle(System.IntPtr)">
            <summary>
            Creates this effect from an existing CGeffect handle
            </summary>
            <param name="effectHandle"> Handle to the CG effect. If this is null, nothing happens </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.GetParameter(System.String)">
            <summary>
            Finds a shader parameter by name
            </summary>
            <param name="name"> Name of the parameter to search for </param>
            <returns> Returns the named parameter, or null if the parameter could not be found </returns>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffect.BindParameter(RbEngine.Rendering.ShaderParameter,RbEngine.Rendering.ShaderParameterBinding)">
            <summary>
            Binds a parameter from this shader to a render state
            </summary>
            <param name="parameter"> Parameter to bind </param>
            <param name="binding"> Render state variable to bind to </param>
            <remarks>
            This need only be called once, to set up the binding. Every time that the shader to which this parameter belongs is applied (IApplicable::Apply())
            the parameter is updated to match the value of bound variable.
            If the parameter binding is set to ShaderParameterBinding.NoBinding, the parameter is unbound, and will no longer get updated.
            </remarks>
        </member>
        <member name="T:RbOpenGlRendering.RbCg.CgRenderEffectLoader">
            <summary>
            Summary description for CgRenderEffectLoader.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffectLoader.#ctor">
            <summary>
            Creates the internal CG context that effects are created from
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffectLoader.Load(System.IO.Stream,System.String)">
            <summary>
            Loads a resource from a stream
            </summary>
            <param name="input"> Input stream to load the resource from </param>
            <returns> The loaded resource </returns>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderEffectLoader.CanLoadStream(System.String,System.IO.Stream)">
            <summary>
            Returns true if this loader can load the specified stream
            </summary>
            <param name="path"> Stream path (contains extension that the loader can check)</param>
            <param name="input"> Input stream (file types can be identified by peeking at header bytes) </param>
            <returns> Returns true if the stream can </returns>
            <remarks>
            path can be null, in which case, the loader must be able to identify the resource type by checking the content in input (e.g. by peeking
            at the header bytes).
            </remarks>
        </member>
        <member name="T:RbOpenGlRendering.RbCg.CgRenderPass">
            <summary>
            Implements a RenderPass object using a CGpass
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderPass.#ctor(System.IntPtr)">
            <summary>
            Sets the CGpass handle
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderPass.Begin">
            <summary>
            Sets the CG pass state
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgRenderPass.End">
            <summary>
            Resets the CG pass state
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.RbCg.CgShaderParameter">
            <summary>
            Implementation of ShaderParameter using CGparameter handle
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.#ctor(System.IntPtr)">
            <summary>
            Setup constructor
            </summary>
            <param name="parameterHandle"> CGparameter handle </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Single)">
            <summary>
            Sets the shader parameter to a single float value
            </summary>
            <param name="val"> New parameter value </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Int32)">
            <summary>
            Sets the shader parameter to a single integer value
            </summary>
            <param name="val"> New parameter value </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Single,System.Single)">
            <summary>
            Sets the shader parameter to an (x,y) float vector
            </summary>
            <param name="x"> Vector x component </param>
            <param name="y"> Vector y component </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Int32,System.Int32)">
            <summary>
            Sets the shader parameter to an (x,y) integer vector
            </summary>
            <param name="x"> Vector x component </param>
            <param name="y"> Vector y component </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Single,System.Single,System.Single)">
            <summary>
            Sets the shader parameter to an (x,y,z) float vector
            </summary>
            <param name="x"> Vector x component </param>
            <param name="y"> Vector y component </param>
            <param name="z"> Vector z component </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the shader parameter to an (x,y,z) integer vector
            </summary>
            <param name="x"> Vector x component </param>
            <param name="y"> Vector y component </param>
            <param name="z"> Vector z component </param>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Single[])">
            <summary>
            Sets the shader parameter to a float array
            </summary>
            <param name="val"> New parameter value </param>
            <remarks>
            Unimplemented - Tao does not appear to provide correct CG function signature (cgSetParameterValuefc())
            </remarks>
        </member>
        <member name="M:RbOpenGlRendering.RbCg.CgShaderParameter.Set(System.Int32[])">
            <summary>
            Sets the shader parameter to an integer array
            </summary>
            <param name="val"> New parameter value </param>
            <remarks>
            Unimplemented - Tao does not appear to provide correct CG function signature (cgSetParameterValueic())
            </remarks>
        </member>
        <member name="P:RbOpenGlRendering.RbCg.CgShaderParameter.Parameter">
            <summary>
            Gets the CG shader parameter handle
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlControlRenderContext">
            <summary>
            Summary description for OpenGlControlRenderContext.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlControlRenderContext.CreateDesignImage">
            <summary>
            Creates an image that is displayed in this control in design mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlControlRenderContext.Create(System.Windows.Forms.Control,System.Byte,System.Byte,System.Byte)">
            <summary>
            Called when the control Load event fires
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlControlRenderContext.MakeCurrent">
            <summary>
            Makes this rendering context current. Called by the paint event handler prior to any rendering
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlControlRenderContext.EndPaint">
            <summary>
            Called when painting has finished
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlMaterial">
            <summary>
            Summary description for OpenGlMaterial.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlMaterial.Apply">
            <summary>
            Applies this material
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlRenderer">
            <summary>
            Summary description for OpenGlRenderer.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.CreateControlContext(System.Windows.Forms.Control)">
            <summary>
            Sets up a control to be rendered to by this renderer
            </summary>
            <param name="control"> Control to set up </param>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.CheckErrors">
            <summary>
            Checks for errors in the current state of the renderer, throwing an exception if there is one
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.ClearColour(System.Drawing.Color)">
            <summary>
            Clears the viewport
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.ClearVerticalGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Clears the viewport using a vertical gradient fill
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.ClearRadialGradient(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Clears the viewport using a radial gradient fill (shit)
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.ClearDepth(System.Single)">
            <summary>
            Clears the depth buffer
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.ApplyColour(System.Drawing.Color)">
            <summary>
            Sets the specified colour as the current colour in the renderer (OpenGL specific)
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.Draw2dQuad(System.Single,System.Single,System.Single,System.Single,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a 2d quad. Used by ClearVerticalGradient(), ClearRadialGradient()
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.SetTransformMode(RbEngine.Rendering.Transform)">
            <summary>
            Helper to set the current transform mode
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.GetGlMatrix(RbEngine.Maths.Matrix44)">
            <summary>
            Helper to convert a Matrix44 to a GL-friendly float array
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.GetMatrix(RbEngine.Rendering.Transform)">
            <summary>
            Gets the current matrix from the specified transform stack
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.Set2d">
            <summary>
            Sets an identity matrix in the projection and model view transforms
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.Push2d">
            <summary>
            Pushes an identity matrix in the projection and model view transforms. The top left hand corner is (X,Y), the bottom right is (W,H) (where
            (W,H) are the viewport dimensions, and (X,Y) is the viewport minimum corner position)
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.Pop2d">
            <summary>
            Pops the identity matrices pushed by Push2d( )
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.PushTransform(RbEngine.Rendering.Transform,RbEngine.Maths.Matrix44)">
            <summary>
            Applies the specified transform, multiplied by the current topmost transform, and adds it to the specified transform stack
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.SetLookAtTransform(RbEngine.Maths.Vector3,RbEngine.Maths.Vector3,RbEngine.Maths.Vector3)">
            <summary>
            Sets the current Transform.kLocalToView transform to a look-at matrix
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.SetPerspectiveProjectionTransform(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the current Transform.kViewToScreen matrix to a projection matrix with the specified attributes
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.SetTransform(RbEngine.Rendering.Transform,RbEngine.Maths.Matrix44)">
            <summary>
            Applies the specified transform, adds it to the specified transform stack
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.PopTransform(RbEngine.Rendering.Transform)">
            <summary>
            Pops a matrix from the specified transform stack, applies the new topmost matrix
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.SetViewport(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the viewport (in pixels)
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderer.PickRay(System.Int32,System.Int32)">
            <summary>
            Makes a 3d ray in world space from a screen space position
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlRenderFactory">
            <summary>
            Implementation of RenderFactory
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewComposite(System.Type)">
            <summary>
            Creates a new composite object, from a given base type
            </summary>
            <param name="baseType">Base type of the composite</param>
            <returns>Returns the new composite object. Returns null if the specified composite type is not supported</returns>
            <remarks>
            Composites are objects that combine render states, vertex buffers, textures and other rendering objects. Examples
            are meshes, particle systems, heightfields, and so on.
            </remarks>
            <example>
            <code lang="CSharp">
            Mesh newMesh = ( Mesh )RenderFactory.Inst.NewComposite( typeof( Mesh ) );
            </code>
            </example>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewRenderState">
            <summary>
            Creates a new RenderState object
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewMaterial">
            <summary>
            Creates a new Material object
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewTexture2d">
            <summary>
            Creates a new Texture2d object
            </summary>
            <returns></returns>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewTextureSampler2d">
            <summary>
            Creates a new ApplyTexture2d object
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewRenderer">
            <summary>
            Creates a new Renderer object
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderFactory.NewShapeRenderer">
            <summary>
            Creates a new ShapeRenderer object
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlRenderState">
            <summary>
            Summary description for OpenGlRenderState.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderState.Apply">
            <summary>
            Applies this render state
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlRenderState.ApplyFlagCap(RbEngine.Rendering.RenderStateFlag,System.Int32)">
            <summary>
            Applies a single OpenGL flagged capability
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlTexture2d">
            <summary>
            Summary description for OpenGlTexture2d.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlTexture2d.Load(System.Drawing.Bitmap)">
            <summary>
            Loads the texture from bitmap data
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlTexture2d.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Creates the texture
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlTexture2d.CheckBmpFormat(System.Drawing.Bitmap,System.Int32@,System.Int32@)">
            <summary>
            Checks the format of a Bitmap. If it's not compatible with any OpenGL formats, it's converted to a format that is
            </summary>
        </member>
        <member name="P:RbOpenGlRendering.OpenGlTexture2d.TextureHandle">
            <summary>
            Returns the internal texture handle
            </summary>
        </member>
        <member name="T:RbOpenGlRendering.OpenGlTextureSampler2d">
            <summary>
            Summary description for OpenGlApplyTexture2d.
            </summary>
        </member>
        <member name="M:RbOpenGlRendering.OpenGlTextureSampler2d.Apply">
            <summary>
            Applies the associated texture and texture parameters
            </summary>
        </member>
    </members>
</doc>
