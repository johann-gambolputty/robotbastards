sampler2D Texture0 = sampler_state
{
	DepthMode	= Luminance;
	MinFilter	= Nearest;
	MagFilter	= Nearest;
	WrapS		= ClampToBorder;
	WrapT		= ClampToBorder;
	BorderColor	= float4( 1, 1, 1, 1 );
};

sampler2D Texture1 = sampler_state
{
	MinFilter	= Linear;
	MagFilter	= Linear;
	WrapS		= Repeat;
	WrapT		= Repeat;
};

struct InputVertex
{
	float4	m_Position	: POSITION;
	float4	m_Normal	: NORMAL;
	float2	m_Texture	: TEXCOORD0;
};

struct OutputVertex
{
	float4	m_Position	: POSITION;
	float2	m_Texture	: TEXCOORD0;
};

float4x4 ModelViewProjectionMatrix;

OutputVertex VertexShader( InputVertex input )
{
	OutputVertex output;

	output.m_Position	= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Texture	= input.m_Texture;

	return output;
}

float4 FragmentShader( OutputVertex input ) : COLOR
{
	float4 t = tex2D( Texture0, input.m_Texture );
	return tex2D( Texture1, input.m_Texture );
}

technique NormalTechnique
{
	pass
	{
		LightingEnable	= false;
		DepthMask		= true;
		ShadeModel		= Smooth;
		FrontFace		= CW;
		DepthFunc		= LEqual;
		DepthTestEnable	= true;
		CullFaceEnable	= true;
		PolygonMode		= int2( Front, Fill );
		VertexProgram	= compile arbvp1 VertexShader( );
		FragmentProgram	= compile arbfp1 FragmentShader( );
	}
}
