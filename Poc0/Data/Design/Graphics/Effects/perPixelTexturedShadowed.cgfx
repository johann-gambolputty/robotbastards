sampler2D Texture0 = sampler_state
{
	DepthMode	= Luminance;
	MinFilter	= Nearest;
	MagFilter	= Nearest;
	WrapS		= ClampToBorder;
	WrapT		= ClampToBorder;
	BorderColor	= float4( 1, 1, 1, 1 );
};

sampler2D Texture1 = sampler_state
{
	MinFilter	= Linear;
	MagFilter	= Linear;
	WrapS		= Repeat;
	WrapT		= Repeat;
};


struct InputVertex
{
	float4	m_Position	: POSITION;			//	Model position
	float4	m_Normal	: NORMAL;			//	Model normal
	float2	m_Tex0		: TEXCOORD0;		//	Model texture coordinate
};

struct OutputVertex
{
	float4	m_Position		: POSITION;		//	Screen position
	float2	m_Tex0			: TEXCOORD0;	//	Texture coordinate
	float3	m_WorldPos		: TEXCOORD1;	//	World position
	float3	m_WorldNormal	: TEXCOORD2;	//	World normal
};

struct SpotLightArray
{
	float3		m_Positions[ 4 ];
	float3		m_Directions[ 4 ];
	float		m_Arcs[ 4 ];
	int			m_NumLights;
};

//	Default shader parameters
float4x4		ModelMatrix;
float4x4		ModelViewProjectionMatrix;
float4x4		InverseTransposeModelMatrix;
SpotLightArray	SpotLights;
float3			EyeZAxis;

//	Custom shader parameters
float			InvShadowNearZ;
float			InvShadowZRatio;
float4x4		ShadowMatrix[ 4 ];

//	Shader constants
const float ShadowTexUStep = 1.0 / 1024.0;
const float ShadowTexVStep = 1.0 / 1024.0;

OutputVertex VertexShader( InputVertex input )
{
	OutputVertex output;
	
	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_WorldPos		= mul( ModelMatrix, input.m_Position ).xyz;
	output.m_WorldNormal	= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_Tex0			= input.m_Tex0;
	
	return output;
}

float GetLightDepth( float z )
{
	return ( ( InvShadowNearZ - ( 1.f / ( z + 1.0f ) ) ) * InvShadowZRatio );
}

const float MinCoverage = 0.4f;
const float CoverageIncrement = 0.6f / 5.f;

float GetShadowCoverage( float4 lightSpacePos )
{
	//	TODO: Move scale and translation to transform
	float	rcp2W			= 1.0f / ( lightSpacePos.w * 2.0f );
	float2	uv				= float2( lightSpacePos.x * rcp2W, lightSpacePos.y * rcp2W ) + float2( 0.5f, 0.5f );
	float	storedDepth0	= tex2D( Texture0, uv ).r;
	float	storedDepth1	= tex2D( Texture0, uv - float2( ShadowTexUStep, 0 ) ).r;
	float	storedDepth2	= tex2D( Texture0, uv + float2( ShadowTexUStep, 0 ) ).r;
	float	storedDepth3	= tex2D( Texture0, uv - float2( 0, ShadowTexVStep  ) ).r;
	float	storedDepth4	= tex2D( Texture0, uv + float2( 0, ShadowTexVStep  ) ).r;

	float	lightDepth		= GetLightDepth( lightSpacePos.z );

	//	Percentage closer filtering
	float	coverage		= MinCoverage;
	coverage += ( storedDepth0 >= lightDepth ) ? CoverageIncrement : 0.0f;
	coverage += ( storedDepth1 >= lightDepth ) ? CoverageIncrement : 0.0f;
	coverage += ( storedDepth2 >= lightDepth ) ? CoverageIncrement : 0.0f;
	coverage += ( storedDepth3 >= lightDepth ) ? CoverageIncrement : 0.0f;
	coverage += ( storedDepth4 >= lightDepth ) ? CoverageIncrement : 0.0f;
	
	return coverage;
}

float4 GetPerPixelColour( float3 vecToLight, float3 lightVec, float3 normal, float mul )
{
	float3 halfVec		= normalize( vecToLight + EyeZAxis );

	float diffuse		= dot( normal, vecToLight );
	float specular		= dot( normal, halfVec );
	float4 lighting		= lit( diffuse, specular, 32 );

	return float4( ( lighting.y.xxx + lighting.z.xxx ) * mul, 1.0f );
}

float4 GetPerPixelColour( float3 lightPos, float3 lightVec, float arc, float3 pos, float3 normal )
{
	float3 vecToLight	= normalize( lightPos - pos );
	
	float coverage = GetShadowCoverage( mul( ShadowMatrix[ 0 ], float4( pos, 1 ) ) );
	float mul = -dot( vecToLight, lightVec ) < arc ? 0.4f : coverage;

	return GetPerPixelColour( vecToLight, lightVec, normal, mul );
}

float4 PerPixelShadowTextureFragmentShader( OutputVertex input ) : COLOR
{
	float3 spotPos = SpotLights.m_Positions[ 0 ];
	float3 spotDir = SpotLights.m_Directions[ 0 ];
	float spotArc = SpotLights.m_Arcs[ 0 ];

	float4 ppColour = GetPerPixelColour( spotPos, spotDir, spotArc, input.m_WorldPos, input.m_WorldNormal );
	
	return ppColour * tex2D( Texture1, input.m_Tex0 );
}

technique NormalTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		FrontFace				= CW;
		DepthFunc				= LEqual;
		DepthTestEnable			= true;
		CullFaceEnable			= false;
		PolygonMode				= int2( Front, Fill );
		PolygonOffset			= float2( 0, 0 );
		PolygonOffsetFillEnable	= false;
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 PerPixelShadowTextureFragmentShader( );
	}
}

