using System;

namespace RbEngine.Interaction
{
	/// <summary>
	/// Objects of this class subscribe to events generated by commands from a specified command list. These commands are turned into CommandMessage objects
	/// and sent to the parent object
	/// </summary>
	public class CommandInputListener : Components.IChildObject
	{
		#region	Command list

		/// <summary>
		/// Sets the command list that this object is associated with
		/// </summary>
		public CommandList	Commands
		{
			set
			{
				if ( m_Commands != null )
				{
					m_Commands.CommandActivated -= new CommandEventDelegate( CommandActivated );
					m_Commands.CommandActive -= new CommandEventDelegate( CommandActive );
				}
				m_Commands = value;
				if ( m_Commands != null )
				{
					m_Commands.CommandActivated += new CommandEventDelegate( CommandActivated );
					m_Commands.CommandActive += new CommandEventDelegate( CommandActive );
				}
			}
			get
			{
				return m_Commands;
			}
		}

		/// <summary>
		/// Sets the command list that this object is associated with, from the name of the list
		/// </summary>
		public string		CommandListName
		{
			set
			{
				Commands = CommandListManager.Inst.Get( value );
				if ( Commands == null )
				{
					throw new ApplicationException( string.Format( "Could not find the command list named \"{0}\"", value ) );
				}
			}
		}

		#endregion

		#region IChildObject Members

		/// <summary>
		/// Called when this object is added to a parent
		/// </summary>
		public void AddedToParent( Object parentObject )
		{
			m_Parent = parentObject;
		}

		#endregion

		#region	Private stuff

		private Object		m_Parent;
		private CommandList	m_Commands;

		/// <summary>
		/// Called when a command is activated
		/// </summary>
		private void		CommandActivated( CommandMessage message )
		{
			if ( m_Parent != null )
			{
				( ( Components.IMessageHandler )m_Parent ).HandleMessage( message );
			}
		}

		/// <summary>
		/// Called when a command is active
		/// </summary>
		private void		CommandActive( CommandMessage message )
		{
			if ( m_Parent != null )
			{
				( ( Components.IMessageHandler )m_Parent ).HandleMessage( message );
			}
		}

		#endregion
	}
}
