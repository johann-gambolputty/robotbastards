sampler2D Texture0 = sampler_state
{
	CompareMode	= CompareRToTexture;
	CompareFunc	= Less;
	DepthMode	= Luminance;
	MinFilter	= Nearest;
	MagFilter	= Nearest;
	WrapS		= ClampToBorder;
	WrapT		= ClampToBorder;
	BorderColor	= float4( 1, 1, 1, 1 );
};

struct TestInput
{
	float4	m_Position : POSITION;
	float4	m_Normal : NORMAL;
};

struct TestOutput
{
	float4	m_Position		: POSITION;
	float3	m_ModelPos		: TEXCOORD0;
	float3	m_ModelNormal	: TEXCOORD1;
	float4	m_LightPos		: TEXCOORD2;
	float3	m_VecToLight	: TEXCOORD3;
};

struct SpotLightArray
{
	float3		m_Positions[ 4 ];
	float3		m_Directions[ 4 ];
	float		m_CosArc[ 4 ];
	int			m_NumLights;
};

SpotLightArray	SpotLights;

float4x4	ShadowMatrix;
float4x4	ModelMatrix;
float4x4	ModelViewProjectionMatrix;
float4x4	InverseTransposeModelMatrix;
float3		EyeZAxis;

TestOutput TestVertexShader( TestInput input )
{
	TestOutput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_ModelPos		= mul( ModelMatrix, input.m_Position ).xyz;
	output.m_ModelNormal	= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_LightPos		= mul( ShadowMatrix, mul( ModelMatrix, input.m_Position ) );
	output.m_VecToLight		= normalize( SpotLights.m_Positions[ 0 ] - output.m_ModelPos );

	return output;
}

float4 TestFragmentShader( TestOutput input ) : COLOR
{
	float4	lightPos		= input.m_LightPos;
	float	rcp2W			= 1.0f / ( lightPos.w * 2 );
	float2	uv				= float2( lightPos.x * rcp2W, lightPos.y * rcp2W ) + float2( 0.5f, 0.5f );	//	TODO: Move scale and translation to transform
//	float4	uv				= float4( ( lightPos.x * rcp2W ) + 0.5f, ( lightPos.y * rcp2W ) + 0.5f, lightPos.z / lightPos.w, 1 );
//	float	storedDepth		= tex2D( Texture0, uv ).r;

	return tex2D( Texture0, uv );

	/*
	float	shadowFactor	= storedDepth >= ( lightPos.z / lightPos.w ) ? 1 : 0.3f;

	float3	normal			= input.m_ModelNormal;
	float3	lightVec		= input.m_VecToLight;
	float3	halfVec			= normalize( lightVec + EyeZAxis );

	float	spotDiffuse		= dot( lightVec, SpotLights.m_Directions[ 0 ] ) > SpotLights.m_CosArc[ 0 ] ? dot( normal, lightVec ) * shadowFactor.xxx : 0.2f;
	float	specular		= dot( normal, halfVec );
	float4	lighting		= lit( spotDiffuse, specular, 64 );

	float4	colour			= float4( lighting.y.xxx + lighting.z.xxx, 1 );

	return colour;
	*/
}

technique NormalTechnique
{
	pass
	{
		FrontFace				= CW;
		DepthFunc				= LEqual;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 TestVertexShader( );
		FragmentProgram			= compile arbfp1 TestFragmentShader( );
	}
}

technique WireframeTechnique
{
	pass
	{
		FrontFace				= CW;
		DepthFunc				= LEqual;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 TestVertexShader( );
		FragmentProgram			= compile arbfp1 TestFragmentShader( );
	}
	pass
	{
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		PolygonMode				= int2( Front, Line );
		PolygonOffsetLineEnable	= true;
		PolygonOffset			= float2( -0.5, -0.5 );
		LightingEnable			= true;	//	TODO: This is a bodge to get the wireframe rendered black
	}
}