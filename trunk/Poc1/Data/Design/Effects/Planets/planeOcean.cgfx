
sampler2D OceanTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = LinearMipMapLinear;
	MagFilter = LinearMipMapLinear;
};


struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal;
	float2 m_Uv : TEX0;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position	= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Normal		= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_Uv			= float2( input.m_Position.x, input.m_Position.z ) / 256;
	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float4 oceanColour = tex2D( OceanTexture, input.m_Uv );

	return oceanColour;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthFunc				= Less;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= false;
		BlendEnable				= false;
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );

	}
}


