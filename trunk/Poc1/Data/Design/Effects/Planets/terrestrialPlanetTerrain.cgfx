#include "terrain.cg"
#include "atmosphereBase.cg"


sampler2D NoiseTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
};

/*
samplerCUBE CloudTexture = sampler_state5
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};

samplerCUBE NextCloudTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};
*/

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
	float2 m_TerrainUv : TEXCOORD0;
	float2 m_SlopeElevation : TEXCOORD1;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal : TEXCOORD0;
	float2 m_TerrainUv : TEXCOORD1;
	float2 m_SlopeElevation : TEXCOORD2;
	float3 m_WorldPos : TEXCOORD3;
};

//	Pipeline effect parameters
float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float FarZ;

//	Custom effect parameters
float PlanetRadius = 100000;
float PlanetMaximumTerrainHeight = 3000;

//float4x4 CloudTransform = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
//	output.m_SphereNormal	= normalize( mul( InverseTransposeModelMatrix, normalize( input.m_Position ) ).xyz );
	output.m_Normal			= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_TerrainUv		= input.m_TerrainUv;
	output.m_SlopeElevation	= input.m_SlopeElevation;
	output.m_WorldPos		= input.m_Position.xyz;

	return output;
}

float2 GetNoise( float2 uv, float range )
{
	return ( tex2D( NoiseTexture, uv ).rg * range ) - float2( range / 2, range / 2 );
}

float2 Fractal2d( float2 uv, float amp, float freq, float lac )
{
//	uv += float2( 4.346f, 4.257f );
	float2 n = GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );

	return n / 1.9f;
}

float2 PerturbSe( float2 se, float2 uv )
{
	float2 offset = Fractal2d( uv, 0.2f, 1.2f, 0.5f );
	return clamp( se + offset, 0, 1 );
}

float4 GetTerrainColour( FragmentShaderInput input, float2 se )
{
	float2 repUv = input.m_TerrainUv * 6;
	return GetTerrainColour( PerturbSe( se, repUv ), repUv );
//	float2 repUvOffset = Fractal2d( input.m_TerrainUv, 0.2f, 1.5f, 0.8f );
	//float2 repUv = 0.01 + frac( input.m_TerrainUv * 6 ) * 0.99f;
	//se = PerturbSe( se, repUv );
	//float type = ( int )( tex2D( TerrainTypeTexture, se ).r * 256.0f );
	//float2 offsetToTile = float2( fmod( type, TileRes ), ( int )( type * InvTileRes ) );

	//float2 tileUv = offsetToTile + repUv;
	//tileUv *= float2( InvTileRes, InvTileRes );
	//float4 diffuse = tex2D( TerrainPackTexture, tileUv );

	//return diffuse;

//	float2 fr = Fractal2d( input.m_TerrainUv, 1.0f, 1.2f, 0.5f );
//	return fr.xxxx;
}

/*
float GetCloudCover( FragmentShaderInput input )
{
	float4 cloudNormal = mul( CloudTransform, input.m_SphereNormal );
	
	float curCloud = texCUBE( CloudTexture, cloudNormal ).r;
	float nextCloud = texCUBE( NextCloudTexture, cloudNormal ).r;
	
	return ( ( nextCloud * CloudBlend ) + ( curCloud * ( 1 - CloudBlend ) ) );
}
*/


float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float2 se = input.m_SlopeElevation;
	float height = length( input.m_WorldPos );
	
	//float slope = saturate( dot( input.m_Normal.xyz, input.m_WorldPos.xyz  / height ) / 0.7f );
	//se.x = slope;
	//se.y = height - PlanetRadius;
	float shade = saturate( -dot( input.m_Normal.xyz, SunDir ) );
	float4 diffuse = GetTerrainColour( input, se ) * shade;

	return float4( GetScatteredObjectColour( input.m_WorldPos, diffuse.rgb ), 1 );
}

float4 DbgSlopeFragmentShader( FragmentShaderInput input ) : COLOR
{
	float4 diffuse = input.m_SlopeElevation.yyyy;
	return diffuse;
}

//*
technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
	//	FragmentProgram			= compile arbfp1 DbgSlopeFragmentShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

//	For some reason, adding one or both of these techniques causes an access violation in CgEffect...
//technique ShowSlopesTechnique
//{
//	pass
//	{
//		LightingEnable			= false;
//		DepthMask				= true;
//		ShadeModel				= Smooth;
//		FrontFace				= CW;
//		DepthTestEnable			= true;
//		DepthFunc				= Less;
//		CullFaceEnable			= true;
//		BlendEnable				= false;
//		PolygonMode				= int2( Front, Fill );
//		VertexProgram			= compile arbvp1 VertexShader( );
//		FragmentProgram			= compile arbfp1 DbgSlopeFragmentShader( );
//	}
//}

/*/
technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	pass
	{
		PolygonOffsetLineEnable	= true;
		PolygonOffset			= float2( -1.0f, -1.0f );
		LightingEnable			= true;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Line );
	}
}
//*/
