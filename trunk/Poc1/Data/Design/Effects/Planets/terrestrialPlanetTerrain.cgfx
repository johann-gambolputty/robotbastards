
sampler2D TerrainPackTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
//	MinFilter = LinearMipMapLinear;
//	MagFilter = LinearMipMapLinear;
};

sampler2D TerrainTypeTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	MinFilter = Nearest;
	MagFilter = Nearest;
};

sampler2D NoiseTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
};
/*
samplerCUBE CloudTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};

samplerCUBE NextCloudTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};
*/

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
	float2 m_TerrainUv : TEXCOORD0;
	float2 m_SlopeElevation : TEXCOORD1;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_SphereNormal : TEXCOORD0;
	float3 m_Normal : TEXCOORD1;
	float2 m_TerrainUv : TEXCOORD2;
	float2 m_SlopeElevation : TEXCOORD3;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float FarZ;

//float4x4 CloudTransform = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_SphereNormal	= normalize( mul( InverseTransposeModelMatrix, normalize( input.m_Position ) ).xyz );
	output.m_Normal			= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_TerrainUv		= input.m_TerrainUv;
	output.m_SlopeElevation	= input.m_SlopeElevation;

	return output;
}

float3 SunNormal = float3( 0, 0, 1 );
const float MinAngle = 0.5f;
const float MaxAngle = 0.6f;
const float Dark = 0.0f;

const float TileRes = 4;
const float InvTileRes = 1.0f / 4.0f;

float2 GetNoise( float2 uv, float range )
{
	return ( tex2D( NoiseTexture, uv ).rg * range ) - float2( range / 2, range / 2 );
}

const float freq = 1.2f;
const float lac = 0.5f;

float2 Fractal2d( float2 uv )
{
	float amp = 1;
	uv += float2( 4.346f, 4.257f );
	float2 n = GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );
	uv *= freq; amp *= lac;
	n += GetNoise( uv, amp );

	return n / 1.9f;
}

float2 PerturbSe( float2 se, float2 uv )
{
	return saturate( se + GetNoise( uv, 0.1f ) );
}

float4 GetTerrainColour( FragmentShaderInput input )
{
	float2 repUv = frac( input.m_TerrainUv );
	float2 se = PerturbSe( input.m_SlopeElevation, repUv );
	float type = ( int )( tex2D( TerrainTypeTexture, se ).r * 256.0f );
	float2 offsetToTile = float2( fmod( type, TileRes ), ( int )( type * InvTileRes ) );
	
	float2 tileUv = offsetToTile + repUv;
	tileUv *= float2( InvTileRes, InvTileRes );
	float4 diffuse = tex2D( TerrainPackTexture, tileUv );
	
	return diffuse;
}

/*
float GetCloudCover( FragmentShaderInput input )
{
	float4 cloudNormal = mul( CloudTransform, input.m_SphereNormal );
	
	float curCloud = texCUBE( CloudTexture, cloudNormal ).r;
	float nextCloud = texCUBE( NextCloudTexture, cloudNormal ).r;
	
	return ( ( nextCloud * CloudBlend ) + ( curCloud * ( 1 - CloudBlend ) ) );
}
*/

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float shade = ( dot( normalize( input.m_Normal ), SunNormal  ) + 1.0f ) / 2.0f;
	shade = shade * shade;

	float4 diffuse = GetTerrainColour( input ) * shade.xxxx;

	return diffuse;
}

float4 DbgSlopeFragmentShader( FragmentShaderInput input ) : COLOR
{
	float4 diffuse = input.m_SlopeElevation.yyyy;
	return diffuse;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

technique ShowSlopesTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 DbgSlopeFragmentShader( );
	}
}

technique WireFrameTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	pass
	{
		PolygonOffsetLineEnable	= true;
		PolygonOffset			= float2( -1.0f, -1.0f );
		LightingEnable			= true;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Line );
	}
}