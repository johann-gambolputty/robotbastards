
sampler2D TerrainPackTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
};

sampler2D TerrainTypeTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Nearest;
	MagFilter = Nearest;
};

sampler2D NoiseTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
};


struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
	float2 m_TerrainUv : TEXCOORD0;
	float2 m_SlopeElevation : TEXCOORD1;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_SphereNormal : TEXCOORD0;
	float3 m_Normal : TEXCOORD1;
	float2 m_TerrainUv : TEXCOORD2;
	float2 m_SlopeElevation : TEXCOORD3;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_SphereNormal = normalize( mul( InverseTransposeModelMatrix, normalize( input.m_Position ) ).xyz );
	output.m_Normal = normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_TerrainUv = input.m_TerrainUv;
	output.m_SlopeElevation = input.m_SlopeElevation;

	return output;
}

float3 SunNormal = float3( 0, 0, 1 );
const float MinAngle = 0.5f;
const float MaxAngle = 0.6f;
const float Dark = 0.0f;

const float TileRes = 4;
const float InvTileRes = 1.0f / 4.0f;

float2 GetNoise( float2 uv, float range )
{
	return ( tex2D( NoiseTexture, uv ).rg * range ) - float2( range / 2, range / 2 );
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float shade = saturate( dot( input.m_Normal, SunNormal ) );
	shade *= shade;
//	float t = shade < MinAngle ? 0.0f : ( shade > MaxAngle ? 1.0f :  ( ( shade - MinAngle ) / ( MaxAngle - MinAngle ) ) );	
//	shade = 0.4f + 0.9f * t;
//	return texCUBE( TerrainSampler, -input.m_SphereNormal ) * shade;

//	input.m_SlopeElevation += GetNoise( input.m_SlopeElevation, 0.1f );

	float type = ( int )( tex2D( TerrainTypeTexture, input.m_SlopeElevation ).r * 256.0f );
	
	float2 offsetToTile = float2( fmod( type, TileRes ), ( int )( type * InvTileRes ) );
	float2 tileUv = offsetToTile + frac( input.m_TerrainUv );
	tileUv *= float2( InvTileRes, InvTileRes );
	float4 diffuse = tex2D( TerrainPackTexture, tileUv ) * shade;

	return diffuse;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

technique WireFrameTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	pass
	{
		PolygonOffsetLineEnable	= true;
		PolygonOffset			= float2( -1.0f, -1.0f );
		LightingEnable			= true;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Line );
	}
}