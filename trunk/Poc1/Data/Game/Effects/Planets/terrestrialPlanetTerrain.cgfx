
samplerCUBE TerrainSampler = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};

sampler2D TerrainTextureSampler = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
};

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
	float2 m_TerrainUv : TEXCOORD0;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_SphereNormal : TEXCOORD0;
	float3 m_Normal : TEXCOORD1;
	float2 m_TerrainUv : TEXCOORD2;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_SphereNormal = normalize( mul( InverseTransposeModelMatrix, normalize( input.m_Position ) ).xyz );
	output.m_Normal = normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	output.m_TerrainUv = input.m_TerrainUv;

	return output;
}

float3 SunNormal = float3( 0, 0, 1 );
const float MinAngle = 0.5f;
const float MaxAngle = 0.6f;
const float Dark = 0.0f;

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float shade = ( dot( input.m_Normal, SunNormal ) + 1 ) / 2;
	shade *= shade;
//	float t = shade < MinAngle ? 0.0f : ( shade > MaxAngle ? 1.0f :  ( ( shade - MinAngle ) / ( MaxAngle - MinAngle ) ) );	
//	shade = 0.4f + 0.9f * t;
//	return texCUBE( TerrainSampler, -input.m_SphereNormal ) * shade;

	return tex2D( TerrainTextureSampler, input.m_TerrainUv ) * shade;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

technique WireFrameTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	pass
	{
		PolygonOffsetLineEnable	= true;
		PolygonOffset			= float2( -1.0f, -1.0f );
		LightingEnable			= true;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Line );
	}
}