struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Diffuse : COLOR0;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Diffuse : COLOR0;
};

//	Pipeline effect parameters
float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float NearZ;
float FarZ;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Diffuse		= float4( input.m_Diffuse, 1 );

	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	return input.m_Diffuse;
}

float4 LineShader( ) : COLOR
{
	return float4( 0, 0, 0, 1 );
}

technique DefaultTechnique
{
	pass
	{
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Back, Fill );
		//PolygonMode				= int2( FrontAndBack, Line );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	pass
	{
		DepthMask				= true;
		DepthTestEnable			= true;
		PolygonOffset			= float2( -0.5f, -0.5f );
		PolygonOffsetLineEnable	= true;
		PolygonMode				= int2( FrontAndBack, Line );
		FragmentProgram			= compile arbfp1 LineShader( );
	}
}
