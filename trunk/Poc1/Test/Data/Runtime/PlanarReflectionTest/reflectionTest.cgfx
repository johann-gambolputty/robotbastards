
sampler2D OceanTexture0 = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = LinearMipMapLinear;
	MagFilter = LinearMipMapLinear;
};

sampler2D OceanTexture1 = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = LinearMipMapLinear;
	MagFilter = LinearMipMapLinear;
};

sampler2D ReflectionsTexture = sampler_state
{
	WrapS = Clamp;
	WrapT = Clamp;
	MinFilter = Linear;
	MagFilter = Linear;
};

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float2 m_Uv : TEXCOORD0;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float2 m_Uv : TEXCOORD0;
	float2 m_ReflectedPos : TEXCOORD1;
	float4 m_WorldPos : TEXCOORD2;
};

//	Pipeline effect parameters
float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float NearZ;
float FarZ;
float3 EyePosition;
float3 EyeZAxis;

//	Custom effect parameters

float4x4 ReflectionProjectionMatrix;
float OceanTextureT = 0;
float ReflectivityOffset = -0.1f;

float hWidth = 2;
float hHeight = 2;
float xOffset = 0.5f;
float yOffset = 0.5f;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );

	float4 reflectedPos		= mul( ReflectionProjectionMatrix, input.m_Position );
	output.m_ReflectedPos	= ( reflectedPos.xy / float2( hWidth, hHeight ) ) + float2( xOffset, yOffset );
	output.m_Uv				= input.m_Uv;
	output.m_WorldPos		= input.m_Position;

	return output;
}

float4 ApplyLighting( float3 pos, float3 normal, float3 lightPos, float3 materialColour )
{
	float3	lightVec	= normalize( lightPos - pos );
	float3	halfVec		= normalize( lightVec + EyeZAxis );
	float	diffuse		= dot( normal, lightVec );
	float	specular	= dot( normal, halfVec );

	float4	lighting		= lit( diffuse, specular, 16 );
	float3	lightingColour	= float3( 1, 1, 1 ) * lighting.y + float3( 1, 1, 1 ) * lighting.z;
	return float4( materialColour * lightingColour, 1 );
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float2 uv = input.m_Uv * 2;
	float3 perturb = tex2D( OceanTexture0, uv ).rgb;
	perturb = normalize( perturb + ( tex2D( OceanTexture1, uv ).rgb - perturb ) * OceanTextureT );
	
	float4 reflectedWPos = mul( ReflectionProjectionMatrix, input.m_WorldPos + float4( perturb, 0 ) );
	float2 reflectedPos = (reflectedWPos.xy / reflectedWPos.w);
	reflectedPos = ( reflectedPos / 2 ) + 0.5f;

	float3 eyeVec = normalize( EyePosition - input.m_WorldPos.xyz );
	float waterColourT = ( dot( eyeVec, perturb ) + 1 ) * 0.5f;
	waterColourT = abs( waterColourT );
//	waterColourT = clamp( waterColourT + ReflectivityOffset, 0, 1 );
//	waterColourT *= waterColourT;
	float4 invWaterColourT = 1 - waterColourT;
	float4 waterColour = ApplyLighting( input.m_WorldPos.xyz, perturb, float3( 0, 10, 20 ), float3( 0, 1, 0.25f ) );

	float4 reflectedColour = tex2D( ReflectionsTexture, reflectedPos );
	return reflectedColour * invWaterColourT + waterColour * waterColourT;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= false;
		BlendEnable				= true;
		BlendFunc				= int2( SrcAlpha, OneMinusSrcAlpha );
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}
