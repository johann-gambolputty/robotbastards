#pragma once
#pragma managed(push, off)

#include <Sse\SseSimpleFractal.h>
#include <Sse\SseRidgedFractal.h>

namespace Poc1
{
	namespace Fast
	{
		//	--------------------------------------------------------------------------------- Types

		///	\brief	Base class for terrain displacers
		class SseSphereTerrainDisplacer
		{
			public :

				///	\brief	Sets up reasonable defaults
				SseSphereTerrainDisplacer( )
				{
					Setup( 1.0f, 2.0f, 3.0f, 6.0f );
				}

				///	\brief Gets the radius of the sphere that the displacement function is defined on
				const __m128& GetSphereRadius( ) const
				{
					return m_Radius;
				}
				
				///	\brief Gets the minimum height generated by this displacer
				const __m128& GetMinimumHeight( ) const
				{
					return m_MinHeight;
				}

				///	\brief	Sets up this displacer
				virtual void Setup( float minHeight, float seaLevel, float maxHeight, float sphereRadius )
				{
					m_Radius = _mm_set1_ps( sphereRadius );
					m_MinHeight = _mm_set1_ps( minHeight );
					m_SeaLevel = _mm_set1_ps( seaLevel );
					m_MaxHeight = _mm_set1_ps( maxHeight );
					m_HeightRange = _mm_div_ps( _mm_sub_ps( m_MaxHeight, m_MinHeight ), m_Radius );

					m_MinHeight = _mm_div_ps( m_MinHeight, m_Radius );
					m_MaxHeight = _mm_div_ps( m_MaxHeight, m_Radius );

					m_MinHeightF = minHeight;
					m_HeightRangeF = maxHeight - minHeight;
				}

				///	\brief	Maps 4 height values into the height range of this displacer
				__m128 MapToHeightRange( const __m128 heights ) const
				{
					return _mm_add_ps( m_MinHeight, _mm_mul_ps( heights, m_HeightRange ) );
				}

				///	\brief	Maps a single normalized height value into the height range of this displacer (does not add minimum height)
				float MapErrorToHeightRange( float height ) const
				{
					return m_HeightRangeF * height;
				}

			protected :

				float m_MinHeightF;
				float m_HeightRangeF;
				__m128 m_Radius;
				__m128 m_MinHeight;
				__m128 m_SeaLevel;
				__m128 m_MaxHeight;
				__m128 m_HeightRange;

		};

		///	\brief	SseSphereTerrainGenerator Displacer type. Does not perturb input positions
		class SseFlatSphereTerrainDisplacer : public SseSphereTerrainDisplacer
		{
			public :

				///	\brief	Maps 4 (x,y,z) vectors onto the minimum distance of this displacer.
				inline __m128 Displace( __m128& xxxx, __m128& yyyy, __m128& zzzz ) const
				{
					xxxx = _mm_mul_ps( xxxx, m_MinHeight );
					yyyy = _mm_mul_ps( yyyy, m_MinHeight );
					zzzz = _mm_mul_ps( zzzz, m_MinHeight );
					return _mm_set1_ps( 1 );
				}
		};

		///	\brief	Displacer decorator class. Adds x-z displacement to an existing displacer
		template < typename BaseDisplacer >
		class _CRT_ALIGN( 16 ) SseFractalGroundOffsetDisplacer : public SseSphereTerrainDisplacer
		{
			public :

				SseFractalGroundOffsetDisplacer( )
				{
					m_XOffset = _mm_set1_ps( 3.14f );
					m_ZOffset = _mm_set1_ps( 6.28f );
				}

				///	\brief	Sets the influence of this displacer. 0 means no influence, 1 means that offsets
				///	generated by this displacer have the same effect on ground displacement, as the base
				///	displacer has on heights
				void SetInfluence( const float influence )
				{
					m_Influence = _mm_set1_ps( influence );
				}

				///	\brief	Gets the fractal used to generate ground displacement values
				SseSimpleFractal& GetFractal( )
				{
					return m_Fractal;
				}

				///	\brief	Gets the fractal used to generate ground displacement values
				const SseSimpleFractal& GetFractal( ) const
				{
					return m_Fractal;
				}

				///	\brief	Gets the base displacer object
				BaseDisplacer& GetBaseDisplacer( )
				{
					return m_Base;
				}

				///	\brief	Gets the base displacer object				
				const BaseDisplacer& GetBaseDisplacer( ) const
				{
					return m_Base;
				}

				virtual void Setup( float minHeight, float seaLevel, float maxHeight, float sphereRadius )
				{
					SseSphereTerrainDisplacer::Setup( minHeight, seaLevel, maxHeight, sphereRadius );
					m_Base.Setup( minHeight, seaLevel, maxHeight, sphereRadius );
				}
				
				///	\brief	Maps 4 (x,y,z) vectors onto the minimum distance of this displacer.
				inline __m128 Displace( __m128& xxxx, __m128& yyyy, __m128& zzzz ) const
				{
					__m128 dispXxxx = m_Fractal.GetSignedValue( xxxx, yyyy, zzzz );
					__m128 dispZzzz = m_Fractal.GetSignedValue( _mm_add_ps( xxxx, m_XOffset ), yyyy, _mm_add_ps( zzzz, m_ZOffset ) );
					dispXxxx = _mm_mul_ps( dispXxxx, m_Influence );
					dispZzzz = _mm_mul_ps( dispZzzz, m_Influence );

					__m128 xAxisX, xAxisY, xAxisZ;
					__m128 yAxisX, yAxisY, yAxisZ;
					__m128 zAxisX, zAxisY, zAxisZ;
					yAxisX = xxxx; yAxisY = yyyy; yAxisZ = zzzz;
					GetCrossProducts( xAxisX, xAxisY, xAxisZ, xxxx, yyyy, zzzz, Constants::Fc_0, Constants::Fc_1, Constants::Fc_0 );
					GetCrossProducts( zAxisX, zAxisY, zAxisZ, xxxx, yyyy, zzzz, xAxisX, xAxisY, xAxisZ );
					SetLength( xAxisX, xAxisY, xAxisZ, dispXxxx );
					SetLength( yAxisX, yAxisY, yAxisZ, dispZzzz );
					SetLength( zAxisX, zAxisY, zAxisZ, dispZzzz );

					xxxx = _mm_add_ps( xxxx, xAxisX );
					yyyy = _mm_add_ps( yyyy, xAxisY );
					zzzz = _mm_add_ps( zzzz, xAxisZ );
					
					xxxx = _mm_add_ps( xxxx, yAxisX );
					yyyy = _mm_add_ps( yyyy, yAxisY );
					zzzz = _mm_add_ps( zzzz, yAxisZ );
					
					xxxx = _mm_add_ps( xxxx, zAxisX );
					yyyy = _mm_add_ps( yyyy, zAxisY );
					zzzz = _mm_add_ps( zzzz, zAxisZ );
					
				//	xxxx = _mm_add_ps( xxxx, dispXxxx );
				//	zzzz = _mm_add_ps( zzzz, dispZzzz );

					__m128 heights = m_Base.Displace( xxxx, yyyy, zzzz );
					return heights;
				}

			private :

				__m128 m_XOffset;
				__m128 m_ZOffset;
				__m128 m_Influence;
				_CRT_ALIGN( 16 ) BaseDisplacer m_Base;
				_CRT_ALIGN( 16 ) SseSimpleFractal m_Fractal;

		}; //SseFractalOffsetDisplacer

		///	\brief	SseSphereTerrainGenerator Displacer type. Uses a ridged fractal to generate input positions
		class _CRT_ALIGN( 16 ) SseRidgedFractalDisplacer : public SseSphereTerrainDisplacer
		{
			public :

				SseRidgedFractalDisplacer( )
				{
				}

				///	\brief	Gets the fractal object
				SseRidgedFractal& GetFractal( )
				{
					return m_Fractal;
				}
				
				///	\brief	Gets the fractal object
				const SseRidgedFractal& GetFractal( ) const
				{
					return m_Fractal;
				}

				///	\brief	Maps 4 (x,y,z) vectors onto the minimum distance of this displacer.
				inline __m128 Displace( __m128& xxxx, __m128& yyyy, __m128& zzzz ) const
				{
					__m128 heights = m_Fractal.GetValue( xxxx, yyyy, zzzz );

					__m128 actualHeights = MapToHeightRange( heights );
					xxxx = _mm_mul_ps( xxxx, actualHeights );
					yyyy = _mm_mul_ps( yyyy, actualHeights );
					zzzz = _mm_mul_ps( zzzz, actualHeights );
					return heights;
				}

			private :

				_CRT_ALIGN( 16 ) SseRidgedFractal m_Fractal;
		};

	}; //Fast
}; //Poc1

#pragma managed(pop)
