using System;
using Rb.Core.Components;

namespace Rb.Interaction
{
	/// <summary>
	/// Objects of this class subscribe to events generated by commands from a specified command list. These commands are turned into CommandMessage objects
	/// and sent to the parent object
	/// </summary>
	public class CommandInputListener : IChild
    {
        #region Construction

        /// <summary>
        /// Default constructor
        /// </summary>
        public CommandInputListener( )
        {
        }

        /// <summary>
        /// Setup constructor
        /// </summary>
        public CommandInputListener( object target, CommandUser user, CommandList commands )
        {
			m_Target	= target;
			m_Commands	= commands;
			User		= user;
        }

        #endregion

        #region	Command list

		public string CommandListName
		{
			set
			{
				m_Commands = CommandListManager.Inst.Get( value );
			}
		}

        /// <summary>
		/// Sets the command list that this object is associated with
		/// </summary>
		public CommandUser User
		{
			set
			{
				if ( m_User != null )
				{
					m_User.RemoveListener( CommandActivated );
					m_User.RemoveListener( CommandActive );
				}
				m_User = value;
				if ( m_User != null )
				{
					m_User.AddActivatedListener( m_Commands, CommandActivated );
					m_User.AddActiveListener( m_Commands, CommandActive );
				}
			}
			get
			{
				return m_User;
			}
		}

		#endregion

		#region Public properties

		/// <summary>
		/// Command messages are sent to this object. If it's not set, it defaults to the parent object
		/// </summary>
		public object Target
		{
			get { return m_Target; }
			set { m_Target = value; }
		}

		#endregion

		#region IChild Members

		/// <summary>
		/// Called when this object is added to a parent
		/// </summary>
		public void AddedToParent( Object parentObject )
		{
			if ( Target == null )
			{
				Target = parentObject;
			}
		}

		#endregion

		#region	Private stuff

		private object		m_Target;
		private CommandUser	m_User;
		private CommandList m_Commands;


		/// <summary>
		/// Called when a command is activated
		/// </summary>
		private void CommandActivated( CommandMessage message )
		{
			if ( Target != null )
			{
				( ( IMessageHandler )Target ).HandleMessage( message );
			}
		}

		/// <summary>
		/// Called when a command is active
		/// </summary>
		private void CommandActive( CommandMessage message )
		{
			if ( Target != null )
			{
				( ( IMessageHandler )Target ).HandleMessage( message );
			}
		}

		#endregion

	}
}
