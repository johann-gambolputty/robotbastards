
samplerCUBE TerrainSampler = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_TerrainNormal : TEXCOORD0;
	float3 m_Normal : TEXCOORD1;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
//	output.m_Normal		= normalize( mul( InverseTransposeModelMatrix, normal ).xyz );
	output.m_TerrainNormal = normalize( mul( InverseTransposeModelMatrix, normalize( input.m_Position ) ).xyz );
	output.m_Normal = mul( InverseTransposeModelMatrix, input.m_Normal ).xyz;

	return output;
}

float3 SunNormal = float3( 1, 0, 0 );
const float MinAngle = 0.0f;
const float MaxAngle = 1.0f;
const float Dark = 0.0f;

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float shade = ( dot( input.m_Normal, SunNormal ) + 1 ) / 2;
//	float t = shade < MinAngle ? 0.0f : ( shade > MaxAngle ? 1.0f :  ( ( shade - MinAngle ) / ( MaxAngle - MinAngle ) ) );
//	shade = Dark + ( 1 - Dark ) * t;
	
	return texCUBE( TerrainSampler, -input.m_TerrainNormal ) * shade;
//	return shade.xxxx;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
	//pass
	//{
	//	PolygonOffsetLineEnable	= true;
	//	PolygonOffset			= float2( -1.0f, -1.0f );
	//	LightingEnable			= true;
	//	DepthMask				= true;
	//	ShadeModel				= Smooth;
	//	FrontFace				= CCW;
	//	DepthTestEnable			= true;
	//	CullFaceEnable			= true;
	//	BlendEnable				= false;
	//	PolygonMode				= int2( Front, Line );
	//}
}
