
sampler2D OceanTexture = sampler_state
{
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = Linear;
	MagFilter = Linear;
//	MinFilter = LinearMipMapLinear;
//	MagFilter = LinearMipMapLinear;
};


struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal : TEXCOORD0;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float4x4 ViewMatrix;
float3 SunDir = float3( 1, 0, 0 );
float3 EyePosition;
float3 EyeZAxis;

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position	= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Normal		= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );
	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float3 normal = normalize( input.m_Normal );
	float2 uv = float2( normal.y * 32, normal.z * 32 );
	float3 oceanColour = tex2D( OceanTexture, uv ).rgb;

	float3	zAxis		= float3( ViewMatrix[ 2 ] );
	float3	halfVec		= normalize( SunDir + zAxis );
	float	diffuse		= dot( normal, SunDir );
	float	specular	= dot( normal, halfVec );

	float4	lighting	= lit( diffuse, specular, 32 );

	float4	colour		= float4( ( lighting.y * oceanColour ) + ( lighting.z * oceanColour ), 1 );

	return colour;
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthFunc				= Less;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		CullFaceEnable			= false;
		BlendEnable				= false;
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
		PolygonMode				= int2( Front, Line );
	}
}


