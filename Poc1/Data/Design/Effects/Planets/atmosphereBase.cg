sampler3D ScatteringTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	WrapR = ClampToEdge;
	MinFilter = Linear;
	MagFilter = Linear;
};

sampler2D OpticalDepthTexture = sampler_state
{
	WrapS = Clamp;
	WrapT = Clamp;
	MinFilter = Linear;
	MagFilter = Linear;
};

float3 SunIntensity = float3( 1, 1, 1 );
float3 SunDir = float3( -1, 0, 0 );
float3 AtmViewVec;
float3 AtmViewPos;
float AtmViewPosLength = 0;
float3 AtmViewDir;
float AtmViewHeight;
float AtmHgCoeff = -0.90f;
float AtmPhaseWeight = 1.0f;
float AtmInnerRadius = 0;
float AtmOuterRadius = 0;
float AtmThickness = 1;
float AtmMiePhaseWeight = 1;

//	Rayleigh phase function
float RayleighPhase( float cosAngle )
{
	return 0.75f * ( 1 + cosAngle * cosAngle );
}

//	Mie phase function - Modified HG from O'Neil
//float HeyneyGreensteinPhaseFunction( float cosSunAngle, float g )
//{
//	float g2 = g * g;
//	float t0 = ( 3 * ( 1 - g2 ) ) / 2 * ( 2 + g2 );
//	float tden0 = pow( 1 + g2 - 2 * g * cosSunAngle, 3.0f / 2.0f );
//	float t1 = ( 1 + cosSunAngle * cosSunAngle ) / tden0;
//	float tRes = t0 * t1;
//	return tRes;
//}

//	Standard Mie phase function
float HeyneyGreensteinPhaseFunction( float cosSunAngle, float g )
{
	g = clamp( g, -1, 1 );
	float g2 = g * g;

	return ( 1.0f - g2 ) / pow( ( 1.0f + g2 ) - ( 2.0f * g * cosSunAngle ), 1.5f );
}


float3 GetScatteredObjectColour( float3 pt, float3 objColour )
{
	float3 viewVec = normalize( pt - AtmViewPos );
	float posToSunAngle = dot( AtmViewVec, SunDir );
	float viewToSunAngle = dot( viewVec, SunDir );

	//	Get scattering coefficients for the object (view position to intersection with ground plane)
	//	h = 0-1
	//	th = 1 when looking straight up, 0 when straight down
	float h = AtmViewHeight;
	float si = ( posToSunAngle + 1.0f ) * 0.5f;
	float th = ( dot( AtmViewVec, viewVec ) + 1.0f ) * 0.5f;

	float4 scatterCoeffs = tex3D( ScatteringTexture, float3( h, si, th ) );
	float rayPhase = RayleighPhase( viewToSunAngle );
	float miePhase = HeyneyGreensteinPhaseFunction( viewToSunAngle, AtmHgCoeff ) * AtmMiePhaseWeight;

	//	Get scattering coefficients for the object (object position to intersection with ground plane)
	float gH = length( pt );
	float gH0 = ( gH - AtmInnerRadius ) / AtmThickness;
	float gSi = ( ( dot( pt, SunDir ) / gH ) + 1.0f ) * 0.5f;
	float gTh = ( ( dot( pt, viewVec ) / gH ) + 1.0f ) * 0.5f;

	//	Correct scattering coefficients
	scatterCoeffs -= tex3D( ScatteringTexture, float3( gH0, gSi, gTh ) );

	//	Calculate optical depth for object
	float3 sunOpticalDepth = tex2D( OpticalDepthTexture, float2( gH0, gSi ) ).rgb;
	float3 viewOpticalDepth = tex2D( OpticalDepthTexture, float2( gH0, gTh ) ).rgb;
	float3 opticalDepth = exp( -sunOpticalDepth - viewOpticalDepth );
	
	//	TODO: AP: Remove Mie scattering from object shading?
	//	Calculate final colour (modified scattering coefficients * optical depth)
	float3 rayScatter = lerp( scatterCoeffs.rgb, scatterCoeffs.rgb * rayPhase, AtmPhaseWeight );
	float mieScatter = lerp( scatterCoeffs.a, scatterCoeffs.a * miePhase, AtmPhaseWeight );
	float3 scatter = saturate( rayScatter + mieScatter );

	return saturate( ( opticalDepth * objColour ) + scatter );
}

// Simplified ray-sphere intersection.
// Assumptions: sphere is centered on the origin, pt is relative to the origin, and is -outside- the sphere
float3 GetRaySphereIntersection( float3 pt, float3 vec, float sphereRadius )
{
	float a0 = dot( pt, pt ) - ( sphereRadius * sphereRadius );
	float a1 = dot( vec, pt );
	float d = ( a1 * a1 ) - a0;
	float root = sqrt( d );
	float t0 = -a1 - root;
	float t1 = -a1 + root;
	float closestT = ( t0 < t1 ) ? t0 : t1;

	return pt + vec * closestT;
}

// Gets the colour of a given point on the sky geometry, seen from a camera position outside the atmosphere
float3 GetExternalScatteredSkyColour( float3 pt )
{
	float3 viewVec = normalize( pt - AtmViewPos );
	float3 viewPos = GetRaySphereIntersection( AtmViewPos, viewVec, AtmOuterRadius );
	float viewHeight = AtmOuterRadius;

	float posToSunAngle = dot( viewPos, SunDir ) / viewHeight;
	float viewToSunAngle = dot( viewVec, SunDir );

	//	TODO: AP: Intersect view segment with outer sphere. If segment intersects sphere, set
	//	the view position to be the intersection point.

	float h = 1.0f;
	float th = ( ( dot( viewPos, viewVec ) / viewHeight ) + 1.0f ) / 2.0f;
	float si = ( posToSunAngle + 1.0f ) / 2.0f;

	float4 scatterCoeffs = tex3D( ScatteringTexture, float3( h, si, th ) );
	float rayPhase = RayleighPhase( viewToSunAngle );
	float miePhase = HeyneyGreensteinPhaseFunction( viewToSunAngle, AtmHgCoeff );

	float3 rayScatter = lerp( scatterCoeffs.rgb, scatterCoeffs.rgb * rayPhase, AtmPhaseWeight );
	float mieScatter = lerp( scatterCoeffs.a, scatterCoeffs.a * miePhase, AtmPhaseWeight );

	return SunIntensity * float3( rayScatter.r + mieScatter, rayScatter.g + mieScatter, rayScatter.b + mieScatter );

}

// Gets the colour of a given point on the sky geometry
float3 GetScatteredSkyColour( float3 pt )
{
	float3 viewVec = normalize( pt - AtmViewPos );
	float posToSunAngle = dot( AtmViewVec, SunDir );
	float viewToSunAngle = dot( viewVec, SunDir );

	float h = AtmViewHeight;
	float th = ( dot( AtmViewVec, viewVec ) + 1.0f ) * 0.5f;
	float si = ( posToSunAngle + 1.0f ) * 0.5f;

	float4 scatterCoeffs = tex3D( ScatteringTexture, float3( h, si, th ) );
	float rayPhase = RayleighPhase( viewToSunAngle );
	float miePhase = HeyneyGreensteinPhaseFunction( viewToSunAngle, AtmHgCoeff );

	float3 rayScatter = lerp( scatterCoeffs.rgb, scatterCoeffs.rgb * rayPhase, AtmPhaseWeight );
	float mieScatter = lerp( scatterCoeffs.a, scatterCoeffs.a * miePhase, AtmPhaseWeight );

	return SunIntensity * float3( rayScatter.r + mieScatter, rayScatter.g + mieScatter, rayScatter.b + mieScatter );
}
