
samplerCUBE StarsTexture = sampler_state
{
	MinFilter = Linear;
	MagFilter = Linear;
};

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal : TEXCOORD0;
};


float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;


FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Normal = normalize( mul( InverseTransposeModelMatrix, input.m_Normal ) ).xyz;

	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float4 starColour = texCUBE( StarsTexture, input.m_Normal.xyz );
	return starColour;
}


technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= false;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}
