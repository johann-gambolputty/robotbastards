
samplerCUBE MarbleTexture = sampler_state
{
	MinFilter = Linear;
	MagFilter = Linear;
};

sampler2D TerrainPackTexture = sampler_state
{
	WrapS = Clamp;
	WrapT = Clamp;
	MinFilter = Linear;
	MagFilter = Linear;
//	MinFilter = LinearMipMapLinear;
//	MagFilter = LinearMipMapLinear;
};

sampler2D TerrainTypeTexture = sampler_state
{
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
	MinFilter = Nearest;
	MagFilter = Nearest;
};

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal : TEXCOORD0;
};

//	Pipeline effect parameters
float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float FarZ;

float3 SunDir = float3( -1, 0, 0 );
const float TileRes = 4;
const float InvTileRes = 1.0f / 4.0f;


FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position		= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Normal			= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );

	return output;
}


float4 GetTerrainColour( float2 se )
{
	float type = ( int )( tex2D( TerrainTypeTexture, se ).r * 256.0f );
	float2 tileUv = float2( fmod( type, TileRes ), ( int )( type * InvTileRes ) );
	tileUv *= float2( InvTileRes, InvTileRes );
	float4 diffuse = tex2D( TerrainPackTexture, tileUv );

	return diffuse;
}


float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	//	Cheat with shading... just use the slope
	float4 marbleColour = texCUBE( MarbleTexture, -input.m_Normal );
	float shade = saturate( -dot( input.m_Normal, SunDir ) );
	return GetTerrainColour( float2( marbleColour.g, marbleColour.r ) ) * shade * ( 1 - marbleColour.r );
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= false;
		ShadeModel				= Smooth;
		FrontFace				= CW;
		DepthTestEnable			= false;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Front, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}
