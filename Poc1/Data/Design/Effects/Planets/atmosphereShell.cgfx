#include "atmosphereBase.cg"

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_WorldPos : TEXCOORD0;
};

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_WorldPos = input.m_Position.xyz;

	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	return float4( GetScatteredSkyColour( input.m_WorldPos.xyz ), 1 );
}

technique DefaultTechnique
{
	pass
	{
	//	Texture3DEnable[0]		= true;
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Back, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

