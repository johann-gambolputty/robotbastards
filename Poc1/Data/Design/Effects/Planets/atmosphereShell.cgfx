sampler3D AtmosphereLookupTexture = sampler_state
{
	WrapS = Clamp;
	WrapT = Clamp;
	WrapR = Clamp;
	MinFilter = Nearest;
	MagFilter = Nearest;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;

float3 SunDir = float3( 1, 0, 0 );
float3 AtmViewPos;
float3 AtmViewDir;
float AtmViewHeight;


struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_WorldPos : TEXCOORD0;
};

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position = mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_WorldPos = input.m_Position.xyz;

	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float3 viewVec = normalize( input.m_WorldPos.xyz - AtmViewPos );

	float h = AtmViewHeight;
	float th = ( ( dot( AtmViewPos, viewVec ) / length( AtmViewPos ) ) + 1 ) / 2;
	float si = ( dot( viewVec, SunDir ) + 1 ) / 2;

	return tex3D( AtmosphereLookupTexture, float3( h, th, si ) );
}

technique DefaultTechnique
{
	pass
	{
	//	Texture3DEnable[0]		= true;
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Back, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

