sampler3D AtmosphereLookupTexture = sampler_state
{
	WrapS = Clamp;
	WrapT = Clamp;
	WrapU = Clamp;
};

float4x4 ModelViewProjectionMatrix;
float4x4 InverseTransposeModelMatrix;
float3 SunToViewVec = float3( 1, 0, 0 );
float SunToViewAngle;

float3 AtmViewPos;
float3 AtmViewDir;
float AtmViewHeight;


struct VertexShaderInput
{
	float4 m_Position : POSITION;
	float4 m_Normal : NORMAL;
};

struct FragmentShaderInput
{
	float4 m_Position : POSITION;
	float3 m_Normal;
};

FragmentShaderInput VertexShader( VertexShaderInput input )
{
	FragmentShaderInput output;

	output.m_Position	= mul( ModelViewProjectionMatrix, input.m_Position );
	output.m_Normal		= normalize( mul( InverseTransposeModelMatrix, input.m_Normal ).xyz );

	return output;
}

float4 FragmentShader( FragmentShaderInput input ) : COLOR
{
	float distToPt = distance( input.m_Position.xyz, AtmViewPos );
	float3 viewVec = normalize( input.m_Position.xyz - AtmViewPos );

	float h = AtmViewHeight;
	float th = dot( AtmViewPos, viewVec ) / AtmViewHeight;
	float si = AtmSunToViewAngle;

	return float4( 1, 0, 0, 1 );
}

technique DefaultTechnique
{
	pass
	{
		LightingEnable			= false;
		DepthMask				= true;
		ShadeModel				= Smooth;
		FrontFace				= CCW;
		DepthTestEnable			= true;
		DepthFunc				= Less;
		CullFaceEnable			= true;
		BlendEnable				= false;
		PolygonMode				= int2( Back, Fill );
		VertexProgram			= compile arbvp1 VertexShader( );
		FragmentProgram			= compile arbfp1 FragmentShader( );
	}
}

