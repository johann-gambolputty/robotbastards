#pragma once
#include <emmintrin.h>

namespace Poc1
{
	namespace Fast
	{
		namespace Terrain
		{
			///	\brief	Base class for terrain displacers
			class SseTerrainDisplacer
			{
				public :

					///	\brief	Sets up reasonable defaults
					SseTerrainDisplacer( )
					{
						Setup( 1.0f, 2.0f, 3.0f, 6.0f );
					}

					///	\brief Gets the scale of the displacement function input (e.g. sphere radius)
					const __m128& GetFunctionScale( ) const
					{
						return m_Scale;
					}
					
					///	\brief Gets the minimum height generated by this displacer
					const __m128& GetMinimumHeight( ) const
					{
						return m_MinHeight;
					}

					///	\brief	Sets up this displacer
					virtual void Setup( float minHeight, float seaLevel, float maxHeight, float functionScale )
					{
						m_Scale = _mm_set1_ps( functionScale );
						m_MinHeight = _mm_set1_ps( minHeight );
						m_SeaLevel = _mm_set1_ps( seaLevel );
						m_MaxHeight = _mm_set1_ps( maxHeight );
						m_HeightRange = _mm_div_ps( _mm_sub_ps( m_MaxHeight, m_MinHeight ), m_Scale );

						m_MinHeight = _mm_div_ps( m_MinHeight, m_Scale );
						m_MaxHeight = _mm_div_ps( m_MaxHeight, m_Scale );

						m_MinHeightF = minHeight;
						m_HeightRangeF = maxHeight - minHeight;
					}

					///	\brief	Maps 4 height values into the height range of this displacer
					__m128 MapToHeightRange( const __m128 heights ) const
					{
						return _mm_add_ps( m_MinHeight, _mm_mul_ps( heights, m_HeightRange ) );
					}

					///	\brief	Maps a single normalized height value into the height scale of this displacer (does not add minimum height)
					float MapToHeightScale( float height ) const
					{
						return m_HeightRangeF * height;
					}

				protected :

					float m_MinHeightF;
					float m_HeightRangeF;
					__m128 m_Scale;
					__m128 m_MinHeight;
					__m128 m_SeaLevel;
					__m128 m_MaxHeight;
					__m128 m_HeightRange;

			};

		};
	};
};