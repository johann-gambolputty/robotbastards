
- TODO
	- Bob
		- H: Add build project selection (solar system, particle system)
	- Particle Systems
		- H: Particle system serialization
		- H: Move particle system library and tools to RB.
		- M: Add particle field descriptor. Replace ParticleBase strings with standard field descriptors
		- M: Add some proper renderers, updaters and spawners (ongoing)
		- M: Add SSE2 parallel particle buffers
		- M: Add profiling for particle systems
		- L: Add uber-buffer/GPU-only particle systems
		- L: Add support for loading assemblies containing particle components in dynamically
	- Terrain
		- M: Add crater terrain
		- M: Add continent level fractal (low-frequency noise)
		- H: Add terrain patch update and render cutoff when planet is far enough away
		- H: Build better terrain pack
		- H: Scattering coefficient correction due to ground plane intersection is not working correctly
		- H: Function resolution should be multiplied by a fraction of the radius of spherical terrain
		- H: Force error for patches with > threshold radius
		- H: Investigate why error does not appear to be totally correct
		- M: Terrain patch build items should use the IWorkItem interface
		- M: Terrain output should be properly within the output range
		- M: Normalized heights returned from ground offset displacers are wrong.
		- M: Would be great to have terrain functions and terrain types defined by some function of latitude
		- M: Tangent frame at poles is incorrect
		- M: Add multi-fractals to the displacer set
		- M: Geomorphing
		- M: Add pre-process noise to the terrain texture
		- M: Add lock-free free list for build items
		- M: Cull quad tree nodes (frustum + horizon culling for spherical planets)
		- L: Refactor SseSphereTerrainGenerator
		- L: Move slope/altitude calculation to fragment shader (it's currently calculated on the CPU per-vertex level)
		- L: Add terrain pack resolution parameter to terrain shader
	- Environment
		- H: Design Biome system for terrain and texture selection
		- L: Volumetric clouds
		- L: Vegetation
		- L: Animal life
	- Planets
		- M: Remove texture "pinch" at the poles of gas giants
		- M: Remove texture "pinch" at the poles of sphere planet oceans
		- H: Add SunDir data source for effects
		- H: Refactor model pattern to make sure that renderer-specific model data (e.g. terrain type textures) is moved to a dedicated model interface
		- H: Change model pattern to take planet reference in interface. Add Initialize() call
		- H: Large radius planets (>1000km)
			- H: Fix larger radius planets (lots of z-fighting, no terrain detail)
		- H: Atmospheric shaders
		- M: GLSL 3.0 atmosphere shader can do rayleigh computation per-vertex
		- M: Move as much calculation as possible out of the per-pixel scattering functions, and into vertex shader
		- M: Add moons back in
		- M: Add sun
		- M: Add light scattering post-process (god-rays)
		- L: Crater terrain function for moons
		- L: Crater terrain types for moons
		- L: Non-spherical planets
			- L: Ring-worlds
			- L: Hollow spheres
		- ?: Restore planet cube map (necessary?)
	- Atmosphere
		- H: Rendering of objects outside the atmosphere (generalize terrain model)
		- H: Fix outside atmosphere shading
		- H: Fix orientation of atmosphere shading for objects
		- M: Add serialization for atmosphere build parameters
		- M: Add atmosphere build task
	- Water
		- H: Improve water rendering
			- H: Animated bump maps
			- H: Ocean swell
			- M: Reflections
			- M: Foam
			- M: Texture/colour selection from depth
			- M: Transparency at shallow depths
		- L: Lakes
		- L: Rivers
	- Cities
		- L: Buildings
		- L: Roads
		- L: Traffic
		- L: Pedestrians
	- Solar system
		- M: Proper procedural star-spheres
	- Assets
		- H: Asset handle reload should evict the asset from the asset cache
		- M: Effect rebuild is only done if cgfx file is edited, not included cg files
		- M: Asset build should not exit if one step fails
		- L: Add versioning to asset build tasks, so new versions will automatically rebuild design data
		- L: Asset cache interface should be based on ISource rather than integer keys
		- L: Asset build should have a UI (progress bar, output text)
		- L: Add bigfile support
		- L: Game assets aware of changes to design objects
			- Perhaps with a service that monitors the design folders?
			- Needs following commands:
				- "Rebuild All"
				- "Build All" (only updates game assets with an earlier timestamp that design assets)
				- "ReBuild" (builds a single named asset)
				- "Build" (builds a single asset)
			- In-game UI
			- Build/Rebuild menu items
	- UI
		- H: Add tweakable camera speed
		- H: Get tweaker variables working
		- M: Try getting WPF to work
		- M: Profiling code pretty much done
			- Profile UI needs fixed scales (adaptive scales is stupid and misleading)
			- Add bits to controls
			- Save profile logs
			- Add .exe profile viewer that can be associated with profile logs
			- Add named events?
			- Add axis to graphs
			- Add zoom in/out buttons
			- Make data page an expando control rather than a tab page
			- Add pause button
			- Add labelling to graph lines on mouse hover
			- Add sample rate up/down spinner
		- L: Ship HUD
	- Ships
		- H: Basic ship graphics
		- H: Get basic ship dynamics working
		- M: Connectors
		- M: Shaders
		- M: Simple ship combat
		- L: Internal ship modelling

	- Networking
		- H: Extend RUNT
		- H: Add WCF service for meta-server (updates, player storage, ...)
	- Tools
		- Planet Builder
			- H: Add terrain visualisation shader
			- H: Add support for loading/saving/exporting atmosphere setup
			- H: Ground terrain graphs should have a "sea level" line
			- L: Atmosphere control should be dependent on planet geometry
			- L: Add "Flat" option to height function
			- L: Add star sphere
			- L: Add "clear selection", "invert selection" options to ground terrain type tab
			- L: Add wireframe render mode to planet builder
			- L: Default terrain function setup should be reflected in the initial control setup
			- L: Add support for loading/saving terrain function setup
			- L: Add legend to graph control (should appear on hover over graph line)
		- Particle Builder
			- H: Add PS load/save code.
			- H: Set up particle system component setup window from input particle sytem
			- H: Add particle system setup (max. number of particles, class, etc.)
			- M: The "Add" drop-down in composite component editor is too short when it contains only 1 item
			- M: Add Trigger updater
			- M: Create decent initial particle system
			- M: Add alpha channel to particle texture
			- M: Add switch between parallel/serial implementations
			- M: Add profiling viewers
			- L: Add shadow rendering
			- L: Add FPS display
	- Graphics Misc.
		- H: Add shader custom build step
		- H: Can't call any GL commands until display is setup (or null reference exceptions in tao)
		- H: Parallel split map shadows
		- H: Technique selector should take an asset path (transparently reset technique when effect is reloaded)
		- H: Technique selector should automatically fallback past invalid techniques (may require technique annotation)
		- H: Add inverse frame to camera interface
		- H: Make UniCamera work the same as standard cameras
		- M: Make camera part of the rendering context (reconcile with global camera in renderer)
		- M: Add support to load rendering library objects from assemblies in the new rendering library layout (can keep
		  assembly selector, but it's not necessary anymore)
		- H: Graph control should invalidate when graphs are added/removed
		- M: Particle systems
		- M: Add configuration options for effect assembly (or perhaps make this data-driven, so when a CG file is loaded, use CG libraries?)
		- M: Fullscreen mode
		- L: Change WaveAnimation class to more generic TextureAnimation
		- L: Create a vertex buffer builder object that can create vertex data like the IDraw interface can
		- L: Render node graph is a bit useless - easy to add nodes outside the influence of the class and screw up start node set
		- L: Effect parameters need a type value
		- L: When effect parameters get a type value, change render nodes to check this when specifying output bindings
		- L: DelegateRenderable has a crap name
		- L: Add vertex component generation options to graphics draw.isurface
		- L: Add validation to technique selector
		- L: Building the rendering assemblies using the batch file apparently causes a spurious empty "Rendering" directory to be created.
		- L: Multimonitor support
		- L: Refactor opengl texture support routines (move from OpenGlTexture2d)
		- L: Add reporting for AuditedGraphicsFactory
		- L: Not sure I like "VertexShaderInput" and "FragmentShaderInput" structure names

	- Profiling

	- Misc.
		- H: Change name from Poc1 to actual project name! (big job...)
		- H: Add unit-test directory
		- H: Add lock-free queue for extended thread pool
		- M: Add delegate to signal task completion, to extended thread pool
		- M: Add support for control point selection (+ deletion) in graph controls
		- M: Add support for spline, sawtooth, sine wave, bias and gain functions in the graph editor
		- M: Add derived EditorAttribute for setting up texture UI type editor (asset handle creation, mip-mapping)
		- M: Remove fast noise test (move to console app. project in tests directory)
		- M: Asset live rebuild causes unhandled exception
		- L: Refactor Muesli
		- L: Add XML serialization to Muesli

- DISCARD
	- M: Move rayleigh computation to vertex shader if possible (requires texture lookup - vs3.0 only. See altered TODO)
	- L: Add MRU file list to terrain texture tool (texture tool is amalgamated into planet builder tool)
	- ?: Now that patches are independent of one another (skirts), can use UniPoint as patch centre (unique transform per patch, though) (ground 	displacement breaks skirts)
	- H: Ground displacement requires connected patches, or slightly different skirt rendering (vertical skirts show up) (see new vertex normal skirts)
			- H: combine terrain/marble rendering using z clipping planes (take a look at PSM) (just doing alpha blend - looks OK-ish)

- DONE
	- L: Gas-giant shaders
	- M: Increase terrain texture UV resolution
	- H: Reinstate cloud generation and rendering
	- M: Add planetary rings
	- H: Display render event needs to accept rendering context
	- H: Alpha blend terrain patches into marble view when rendering both
	- H: Marble texture rebuild occurs whenever the model changes, which is often when editing terrain textures
	- M: Make the effect assembly load on-demand (i.e. when the effect manager is referenced)
	- H: Slope function threshold is inaccurate
	- H: Noise and fractal with noise basis does not tile in terrain shader
	- L: Change from BackgroundWorker in terrain quad patch builder, to ThreadPool
	- M: Allow multiple graphs to be displayed on a single graph control
	- H: Refactor Poc1.Universe. Create Poc1.Core, Poc1.Terrain, Poc1.Universe
	- H: Make model/renderer pattern for clouds
	- H: Move to model/renderer pattern for planet atmosphere, ocean, and terrain
	- H: Add atmosphere tab
	- H: Spherical terrain should be affected by changing ground texture setup
	- H: Add terrain type and pack textures to terrain model interface
	- H: Use sphere geometry instead of planar
	- H: Add dispose call to quad patch builder on form close
	- H: Multiple graph selection on graph controls is broken
	- H: Add support for multiple functions displayed on a single graph control
	- H: Add ocean tab
	- H: Terrain skirts should be generated in the direction of vertex normals. This should allow them to work with ground displacement
	- H: Add support for 3d textures
	- H: Add support for loading/saving terrain type setup
	- H: Fix destruction issue with TerrainQuadPatchBuilder
	- H: Add terrain type builder tab
	- H: Finish function editor
	- H: Change rubbish particle system setup window
	- H: Fix rendering assembly post-build step (it's still a bit of a bodge)
	- H: Add UITypeEditor factory
	- H: Use per second units. Change rendering/update to cope
	- H: Add composite components
	- H: Add UI for composite components
	- H: Fix blunderbuss angle to degrees
	- H: Add planar terrain geometry type for PlanetBuilder tool
	- M: Sphere terrain displacer base class can be renamed as SseTerrainDisplacer - it works for all underlying geometries
	- H: Adapt terrain rendering to work with planet builder tool
	- L: Add ground grid as a frame of reference
	- H: Fix blunderbuss spawner - randomise direction vector within cone
	- H: Patch rendering has become slow
	- H: Catch exceptions thrown by asset loads (in solar system construction only...)
	- H: Fix game client to use new rendering library directories
	- H: Create Planet Builder
	- M: Ground displacement needs to take place on the plane defined by the tangent on the planet's sphere (currently always x-z)
	- H: Fix terrain texture generator to use relative paths
	- H: Sea
	- M: Add noise to terrain type texture
	- L: Add x/z displacement decorator class
	- H: Distance to terrain patch should be measured as closest distance to patch bounding volume
	- H: Fix terrain skirts
	- H: Make cloud transitions less pronounced
	- H: Vertex indexing error when ReduceDetail() is called on a patch with the new mt terrain builder
	- H: Cloud level dependent on planet radius
	- H: Terrain function sphere needs radius dependent on radius of planet (or moons = extra spiky)
	- M: Move rendering assemblies to separate sub-directories (e.g. bin\OpenGL), rather than making them explicit references.
	- Assets: Design to Game builds
	- Terrain: Multi-threading to queue up patch creation
	- Terrain: Keep terrain patches after they are popped
	- Terrain: Clamp slope 
	- Environment: Simple cloud cover	
	- Terrain: Local terrain function sampling to determine high-quality normals even for coarse patches
	- Misc: Refactoring: Split out fast terrain code into Poc1.Fast.Terrain (keep Poc1.Fast for shared stuff like aligned allocations)

