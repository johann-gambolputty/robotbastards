::Cube Maps
- spherical coordinates are -not- a good parameterization of a sphere when generating noise (though 2d noise would be
sufficient, using s,t coordinates as inputs)
	- Obvious really :(

::SSE implementation of noise and fractal code

- C# code was surprisingly quick, only initially 2x slower than initial SSE2 implementation (expected > 4x slower)
	- Probably both underestimation of C# + poor SSE2 usage
	- Bigger speed boosts apparent after re-working SSE2 and encompassing more of the outer generation loop in unmanaged code
		- Cuts down on loads from memory to simd registers in inner loops
- Lookup tables appeared to work OK in perm code, to much surprise. They actually provided a slight speed increase (probably
small measurement error. But still...).
- Managed/unmanaged SSE C++ is a bit of a pain - no intrinsics/aligned data in managed code.
	- So, allocate an unmanaged object containing SSE2 noodles, using _aligned_malloc + placement new
	- Not so bad - forces use of Private Implementation idiom

::Clouds
- Implemented for marble rendering mode by setting up a separate thread that generates a cubemap (c2) using a ridged fractal
with some fiddly bits. While generation is taking place, the main rendering thread is slowly blending between two older
cube maps (c0 and c1). When the new cube map is complete, the rendering thread waits until it has got to the end of the blend,
c1 replaces c0, c2 replaces c1, and the generation thread starts creating a new cloud texture in c0.

- "Shadow" is cast on the ground in marble rendering mode, by looking up the alpha in the cloud cube map.

- Generation uses new SSE2 fast fractal code.

::Patches
- Currently working with a regular grid of patches
	- Works OK. Fairly easy to fix up patch seams
	- Variable size patches requires a memory manager sitting on top of the terrain vertex buffer
		- Requires a compaction pass if the vb memory gets fragmented. Haven't got this working yet, because it
		  requires all patches to rebuild their index buffers.
- Looking at quad-tree
	- Fixed patch size means terrain vb memory manager is a simple free list - no compaction needed
	- "Feels better" - adaptive nature of quad tree means that it can theoretically handle any size of planet.
		- Regular grid would have to have size as some function of planet radius
	- Harder to fix patch seams. May just use skirts/flanges for now.
	- Not sure how this will impact number of DiP calls. At least with a regular grid, there was a fixed number of DiP calls.

- Add water
	- Just add a fixed radius sphere for now
	- Water opacity can be calculated by rendering scene depth without water into render target
	- This scene depth map could also render atmospheric 'slabs' for atmospheric shader
	- While we're at it, other POV effects can be rendered into the same render target - e.g. bloom

::More SSE
	- Discovered what was causing the step effect in high-resolution patches. The reciprocal square root intrinsic 
	  was causing inaccuracy to creep in as patch u/v steps got smaller. Fixed by calculating the reciprocal
	  manually (lets me fold in the radius of the sphere that the fractal functions are defined on for free, which
	  is handy).


::25/05/2008
Have added "ground displacement" to the terrain generation. This adds a fractal term to the local x and z positions of patch
vertices. It looks good but there's some important issues:
1) Patches can't be rendered with vertical skirts anymore (because two patches can join behind the plane of a skirt). This
leaves either a proper patch crack filling approach, or rendering without screen clears (which probably wouldn't work anyway,
because the screen is effectively cleared by rendering the star sphere).
2) Currently, displacement is applied to global x and z axis. Need to change this - bodged it in as a global
displacement just to have a look at the effect, but it tends to leave local terrain features oriented along the same facings
depending on where you are on the globe.
3) It's not totally clear how this should impact the LOD model. The obvious solution is to extrapolate the entire vertex 
position, rather than the interpolated height, but that could be quite expensive.
4) Displacement is applied irrespective of local dY. This means that large displacements could occur on flat ground, which
may look odd, and result in z-fighting.

Also added a rubbishy ocean.

::09/06/2008
Refactored ground and height displacement stuff, and added planar terrain geometry, so terrain setups can be tested in the
new planet builder tool. This app. will also be used to test out atmospheric shaders, and terrain types. Have also added a
particle system builder. 

::14/06/2008
Started thinking about a biome system. It would be handy to be able to classify a "shoreline" biome, that gets used whenever
conditions are right (close to water, shallow slopes, certain latitude band). Biomes could be classified by latitude (e.g.
Arctic, Desert, Temperate). This information could be put into some sort of lookup texture and calculated entirely in a pixel
shader. It's quite a big change to integrate biomes into the toolchain, though :-/
The skirts on terrain patches have been changed from being offset by fixed direction, to the direction of the vertex normal above
the skirt. This allows ground displacement to work without connected patches, although you still occassionally see the odd fin
sticking out of the ground, which is annoying.
